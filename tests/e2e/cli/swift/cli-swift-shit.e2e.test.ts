/**
 * CLI swift shit ÂëΩ‰ª§ E2E Ê∏¨Ë©¶
 * Âü∫Êñº swift-sample-project fixture Ê∏¨Ë©¶ÂûÉÂúæÂ∫¶Ë©ïÂàÜÂäüËÉΩ
 */

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { loadFixture, type FixtureProject } from '../../helpers/fixture-manager.js';
import { executeCLI } from '../../helpers/cli-executor.js';

describe('CLI swift shit - Âü∫Êñº swift-sample-project fixture', () => {
  let fixture: FixtureProject;

  beforeEach(async () => {
    fixture = await loadFixture('swift-sample-project');
  });

  afterEach(async () => {
    await fixture.cleanup();
  });

  // ============================================================
  // 1. Âü∫Êú¨ÂäüËÉΩÊ∏¨Ë©¶Ôºà5 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('Âü∫Êú¨ÂäüËÉΩ', () => {
    it('ÊáâË©≤ÂàÜÊûêÂ∞àÊ°à‰∏¶Ëº∏Âá∫ JSON Ê†ºÂºèË©ïÂàÜ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.shitScore).toBeDefined();
      expect(output.shitScore).toBeGreaterThanOrEqual(0);
      expect(output.shitScore).toBeLessThanOrEqual(100);
      expect(output.grade).toBeDefined();
      expect(output.gradeInfo).toBeDefined();
      expect(output.gradeInfo.emoji).toBeDefined();
      expect(output.gradeInfo.message).toBeDefined();
    });

    it('ÊáâË©≤ÂåÖÂê´ÂõõÂ§ßÁ∂≠Â∫¶Ë©ïÂàÜ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.dimensions).toBeDefined();
      expect(output.dimensions.complexity).toBeDefined();
      expect(output.dimensions.maintainability).toBeDefined();
      expect(output.dimensions.architecture).toBeDefined();
      expect(output.dimensions.qualityAssurance).toBeDefined();

      // È©óË≠âÊ¨äÈáçÔºà30%/30%/30%/20%Ôºâ
      expect(output.dimensions.complexity.weight).toBe(0.3);
      expect(output.dimensions.maintainability.weight).toBe(0.3);
      expect(output.dimensions.architecture.weight).toBe(0.3);
      expect(output.dimensions.qualityAssurance.weight).toBe(0.2);
    });

    it('ÊáâË©≤ÂåÖÂê´ summary Áµ±Ë®àË≥áË®ä', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.summary).toBeDefined();
      expect(output.summary.totalFiles).toBeGreaterThanOrEqual(0);
      expect(output.summary.analyzedFiles).toBeGreaterThanOrEqual(0);
      expect(output.summary.totalShit).toBeGreaterThanOrEqual(0);
    });

    it('--detailed ÊáâË©≤Ëº∏Âá∫ topShit Âíå recommendations', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.topShit).toBeDefined();
      expect(Array.isArray(output.topShit)).toBe(true);
      expect(output.recommendations).toBeDefined();
      expect(Array.isArray(output.recommendations)).toBe(true);
    });

    it('Ê≤íÊúâ --detailed ‰∏çÊáâË©≤Ëº∏Âá∫ topShit', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.topShit).toBeUndefined();
      expect(output.recommendations).toBeUndefined();
    });
  });

  // ============================================================
  // 2. ÂèÉÊï∏Ê∏¨Ë©¶Ôºà3 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('ÂèÉÊï∏Ê∏¨Ë©¶', () => {
    it('--top ÊáâË©≤ÈôêÂà∂ topShit Êï∏Èáè', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--top',
        '3',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      if (output.topShit && output.topShit.length > 0) {
        expect(output.topShit.length).toBeLessThanOrEqual(3);
      }
    });

    it('ÂàÜÊï∏Ë∂ÖÈÅé --max-allowed ÊáâË©≤Â§±ÊïóÔºàexit 1Ôºâ', async () => {
      // ÂÖàÂèñÂæóÂØ¶ÈöõÂàÜÊï∏
      const scoreResult = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);
      const scoreOutput = JSON.parse(scoreResult.stdout);
      const actualScore = scoreOutput.shitScore;

      // Ë®≠ÂÆö‰ΩéÊñºÂØ¶ÈöõÂàÜÊï∏ÁöÑÈñÄÊ™ªÔºåÂøÖÂÆöÂ§±Êïó
      // Â¶ÇÊûúÂàÜÊï∏ÁÇ∫ 0ÔºåË∑≥ÈÅéÊ≠§Ê∏¨Ë©¶
      if (actualScore === 0) {
        // ‰ΩøÁî®‰∏ÄÂÄã‰∏çÂèØËÉΩÈÅîÊàêÁöÑÊ¢ù‰ª∂‰æÜË®≠ÁΩÆÈñÄÊ™ª
        const result = await executeCLI([
          'shit',
          '--path',
          fixture.tempPath,
          '--max-allowed',
          '-1',
          '--format',
          'json'
        ]);

        // ‰ªª‰ΩïÊ≠£Êï∏ÂàÜÊï∏ÈÉΩÊúÉË∂ÖÈÅé -1
        expect([0, 1]).toContain(result.exitCode);
        return;
      }

      const maxAllowed = Math.max(0, Math.floor(actualScore) - 1);

      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--max-allowed',
        maxAllowed.toString(),
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(1);
      expect(result.stderr).toContain('ShitScore');
    });

    it('ÂàÜÊï∏‰ΩéÊñº --max-allowed ÊáâË©≤ÊàêÂäüÔºàexit 0Ôºâ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--max-allowed',
        '100', // Ë®≠ÂÆöÊ•µÈ´òÈñÄÊ™ªÔºåÂøÖÂÆöÈÄöÈÅé
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.shitScore).toBeLessThanOrEqual(100);
    });
  });

  // ============================================================
  // 3. Ëº∏Âá∫Ê†ºÂºèÊ∏¨Ë©¶Ôºà2 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('Ëº∏Âá∫Ê†ºÂºè', () => {
    it('--format summary ÊáâË©≤Ëº∏Âá∫‰∫∫È°ûÂèØËÆÄÊ†ºÂºè', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'summary'
      ]);

      expect(result.exitCode).toBe(0);
      expect(result.stdout).toContain('ÂûÉÂúæÂ∫¶Ë©ïÂàÜ');
      expect(result.stdout).toContain('Á∏ΩÂàÜ');
      expect(result.stdout).toContain('Á∂≠Â∫¶');
    });

    it('--format json ÊáâË©≤Ëº∏Âá∫ÁµêÊßãÂåñË≥áÊñô', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      // È©óË≠âÊòØÊúâÊïàÁöÑ JSON
      const output = JSON.parse(result.stdout);
      expect(output).toBeDefined();
      expect(typeof output.shitScore).toBe('number');
    });
  });

  // ============================================================
  // 4. Ë©ïÁ¥öÁ≥ªÁµ±È©óË≠âÔºà2 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('Ë©ïÁ¥öÁ≥ªÁµ±', () => {
    it('swift-sample-project ÊáâË©≤ÊúâÂêàÁêÜË©ïÁ¥ö', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      // Swift Â∞àÊ°àÊáâË©≤ÊúâË©ïÁ¥ö
      expect(['A', 'B', 'C', 'D', 'F']).toContain(output.grade);
      expect(output.shitScore).toBeGreaterThanOrEqual(0);
      expect(output.shitScore).toBeLessThanOrEqual(100);
    });

    it('Ë©ïÁ¥ö emoji ÊáâË©≤ËàáÂàÜÊï∏Â∞çÊáâ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      const { shitScore, grade, gradeInfo } = output;

      // È©óË≠âË©ïÁ¥öÈÇèËºØ
      if (shitScore < 30) {
        expect(grade).toBe('A');
        expect(gradeInfo.emoji).toBe('‚úÖ');
      } else if (shitScore < 50) {
        expect(grade).toBe('B');
        expect(gradeInfo.emoji).toBe('‚ö†Ô∏è');
      } else if (shitScore < 70) {
        expect(grade).toBe('C');
        expect(gradeInfo.emoji).toBe('üí©');
      } else if (shitScore < 85) {
        expect(grade).toBe('D');
        expect(gradeInfo.emoji).toBe('üí©üí©');
      } else {
        expect(grade).toBe('F');
        expect(gradeInfo.emoji).toBe('üí©üí©üí©');
      }
    });
  });

  // ============================================================
  // 5. Á∂≠Â∫¶ÂàÜÊï∏Ë®àÁÆóÔºà2 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('Á∂≠Â∫¶ÂàÜÊï∏Ë®àÁÆó', () => {
    it('Ë§áÈõúÂ∫¶Á∂≠Â∫¶ÊáâË©≤Ë≠òÂà•È´òË§áÈõúÂ∫¶Ê™îÊ°à', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json',
        '--detailed'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.dimensions.complexity.breakdown).toBeDefined();
      expect(output.dimensions.complexity.breakdown.highComplexity).toBeGreaterThanOrEqual(0);
      expect(output.dimensions.complexity.breakdown.longFunction).toBeGreaterThanOrEqual(0);
    });

    it('Êû∂ÊßãÁ∂≠Â∫¶ÊáâË©≤Ê™¢Ê∏¨Âæ™Áí∞‰æùË≥¥', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json',
        '--detailed'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.dimensions.architecture.breakdown).toBeDefined();
      expect(output.dimensions.architecture.breakdown.circularDependency).toBeGreaterThanOrEqual(0);
      expect(output.dimensions.architecture.breakdown.orphanFile).toBeGreaterThanOrEqual(0);
    });
  });

  // ============================================================
  // 6. ÊîπÈÄ≤Âª∫Ë≠∞Ôºà2 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('ÊîπÈÄ≤Âª∫Ë≠∞', () => {
    it('--detailed ÊáâË©≤Áî¢ÁîüÂÖ∑È´îÊîπÈÄ≤Âª∫Ë≠∞', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      if (output.recommendations && output.recommendations.length > 0) {
        const firstRec = output.recommendations[0];
        expect(firstRec.priority).toBeDefined();
        expect(firstRec.category).toBeDefined();
        expect(firstRec.suggestion).toBeDefined();
        expect(firstRec.affectedFiles).toBeDefined();
        expect(Array.isArray(firstRec.affectedFiles)).toBe(true);
      }
    });

    it('Âª∫Ë≠∞ÊáâË©≤ÊåâÂÑ™ÂÖàÁ¥öÊéíÂ∫è', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      if (output.recommendations && output.recommendations.length > 1) {
        const priorities = ['critical', 'high', 'medium', 'low'];
        const recs = output.recommendations;

        // È©óË≠âÂÑ™ÂÖàÁ¥öÈÅûÊ∏õ
        for (let i = 0; i < recs.length - 1; i++) {
          const currentPriorityIndex = priorities.indexOf(recs[i].priority);
          const nextPriorityIndex = priorities.indexOf(recs[i + 1].priority);
          expect(currentPriorityIndex).toBeLessThanOrEqual(nextPriorityIndex);
        }
      }
    });
  });

  // ============================================================
  // 7. ÁâπÊÆäÂ†¥ÊôØÊ∏¨Ë©¶Ôºà2 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('ÁâπÊÆäÂ†¥ÊôØ', () => {
    it('ÊáâË©≤ÂàÜÊûêÂñÆ‰∏ÄÊ™îÊ°à', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.getFilePath('Sources/SwiftSampleApp/App/SwiftSampleApp.swift'),
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.shitScore).toBeDefined();
      expect(output.shitScore).toBeGreaterThanOrEqual(0);
      expect(output.shitScore).toBeLessThanOrEqual(100);
      expect(output.summary.totalFiles).toBeGreaterThanOrEqual(0);
    });

    it('ÊáâË©≤ÂàÜÊûêÁâπÂÆöÁõÆÈåÑ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.getFilePath('Sources/SwiftSampleApp'),
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.summary.totalFiles).toBeGreaterThanOrEqual(0);
      expect(output.dimensions).toBeDefined();
    });
  });

  // ============================================================
  // 8. Á∏ΩÂàÜË®àÁÆóÈ©óË≠âÔºà1 ÂÄãÊ∏¨Ë©¶Ôºâ
  // ============================================================

  describe('Á∏ΩÂàÜË®àÁÆó', () => {
    it('Á∏ΩÂàÜÊáâË©≤ÊòØÂõõÂÄãÁ∂≠Â∫¶ÁöÑÂä†Ê¨äÂπ≥Âùá', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      const { complexity, maintainability, architecture, qualityAssurance } = output.dimensions;
      const calculatedScore =
        complexity.weightedScore +
        maintainability.weightedScore +
        architecture.weightedScore +
        qualityAssurance.weightedScore;

      // ÂÖÅË®±Â∞èÊï∏ÈªûË™§Â∑Æ
      expect(Math.abs(calculatedScore - output.shitScore)).toBeLessThan(0.1);
    });
  });
});
