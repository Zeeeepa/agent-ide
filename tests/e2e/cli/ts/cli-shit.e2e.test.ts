/**
 * CLI shit ÂëΩ‰ª§ E2E Ê∏¨Ë©¶
 * Âü∫Êñº sample-project fixture Ê∏¨Ë©¶ÂûÉÂúæÂ∫¶Ë©ïÂàÜÂäüËÉΩ
 */

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { loadFixture, FixtureProject } from '../../helpers/fixture-manager';
import { executeCLI } from '../../helpers/cli-executor';

describe('CLI shit - Âü∫Êñº sample-project fixture', () => {
  let fixture: FixtureProject;

  beforeEach(async () => {
    fixture = await loadFixture('sample-project');
  });

  afterEach(async () => {
    await fixture.cleanup();
  });

  // ============================================================
  // 1. Âü∫Êú¨ÂäüËÉΩÊ∏¨Ë©¶
  // ============================================================

  it('ÊáâË©≤ÂàÜÊûêÂ∞àÊ°à‰∏¶Ëº∏Âá∫ JSON Ê†ºÂºèË©ïÂàÜ', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.shitScore).toBeDefined();
    expect(output.shitScore).toBeGreaterThanOrEqual(0);
    expect(output.shitScore).toBeLessThanOrEqual(100);
    expect(output.grade).toBeDefined();
    expect(output.gradeInfo).toBeDefined();
    expect(output.gradeInfo.emoji).toBeDefined();
    expect(output.gradeInfo.message).toBeDefined();
  });

  it('ÊáâË©≤ÂåÖÂê´‰∏âÂ§ßÁ∂≠Â∫¶Ë©ïÂàÜ', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.dimensions).toBeDefined();
    expect(output.dimensions.complexity).toBeDefined();
    expect(output.dimensions.maintainability).toBeDefined();
    expect(output.dimensions.architecture).toBeDefined();

    // È©óË≠âÊ¨äÈáçÔºàÊñ∞Â¢ûÂìÅË≥™‰øùË≠âÁ∂≠Â∫¶ÂæåË™øÊï¥ÁÇ∫ 30%/30%/30%/20%Ôºâ
    expect(output.dimensions.complexity.weight).toBe(0.3);
    expect(output.dimensions.maintainability.weight).toBe(0.3);
    expect(output.dimensions.architecture.weight).toBe(0.3);

    // È©óË≠âÂàÜÊï∏ÁØÑÂúç
    expect(output.dimensions.complexity.score).toBeGreaterThanOrEqual(0);
    expect(output.dimensions.complexity.score).toBeLessThanOrEqual(100);
  });

  it('ÊáâË©≤ÂåÖÂê´ summary Áµ±Ë®àË≥áË®ä', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.summary).toBeDefined();
    expect(output.summary.totalFiles).toBeGreaterThan(0);
    expect(output.summary.analyzedFiles).toBeGreaterThan(0);
    expect(output.summary.totalShit).toBeGreaterThanOrEqual(0);
  });

  // ============================================================
  // 2. --detailed ÂèÉÊï∏Ê∏¨Ë©¶
  // ============================================================

  it('--detailed ÊáâË©≤Ëº∏Âá∫ topShit Âíå recommendations', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--detailed',
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.topShit).toBeDefined();
    expect(Array.isArray(output.topShit)).toBe(true);
    expect(output.recommendations).toBeDefined();
    expect(Array.isArray(output.recommendations)).toBe(true);
  });

  it('Ê≤íÊúâ --detailed ‰∏çÊáâË©≤Ëº∏Âá∫ topShit Âíå recommendations', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.topShit).toBeUndefined();
    expect(output.recommendations).toBeUndefined();
  });

  // ============================================================
  // 3. --top ÂèÉÊï∏Ê∏¨Ë©¶
  // ============================================================

  it('--top ÊáâË©≤ÈôêÂà∂ topShit Êï∏Èáè', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--detailed',
      '--top',
      '5',
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    if (output.topShit && output.topShit.length > 0) {
      expect(output.topShit.length).toBeLessThanOrEqual(5);
    }
  });

  // ============================================================
  // 4. --max-allowed ÂèÉÊï∏Ê∏¨Ë©¶
  // ============================================================

  it('ÂàÜÊï∏Ë∂ÖÈÅé --max-allowed ÊáâË©≤Â§±ÊïóÔºàexit 1Ôºâ', async () => {
    // ÂÖàÂèñÂæóÂØ¶ÈöõÂàÜÊï∏
    const scoreResult = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'json'
    ]);
    const scoreOutput = JSON.parse(scoreResult.stdout);
    const actualScore = scoreOutput.shitScore;

    // Ë®≠ÂÆö‰ΩéÊñºÂØ¶ÈöõÂàÜÊï∏ÁöÑÈñÄÊ™ªÔºåÂøÖÂÆöÂ§±Êïó
    const maxAllowed = Math.max(0, Math.floor(actualScore) - 1);

    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--max-allowed',
      maxAllowed.toString(),
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(1);
    expect(result.stderr).toContain('ShitScore');
  }, 60000);

  it('ÂàÜÊï∏‰ΩéÊñº --max-allowed ÊáâË©≤ÊàêÂäüÔºàexit 0Ôºâ', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--max-allowed',
      '100', // Ë®≠ÂÆöÊ•µÈ´òÈñÄÊ™ªÔºåÂøÖÂÆöÈÄöÈÅé
      '--format',
      'json'
    ]);

    expect(result.exitCode).toBe(0);

    const output = JSON.parse(result.stdout);
    expect(output.shitScore).toBeLessThanOrEqual(100);
  });

  // ============================================================
  // 5. summary Ëº∏Âá∫Ê†ºÂºèÊ∏¨Ë©¶
  // ============================================================

  it('--format summary ÊáâË©≤Ëº∏Âá∫‰∫∫È°ûÂèØËÆÄÊ†ºÂºè', async () => {
    const result = await executeCLI([
      'shit',
      '--path',
      fixture.tempPath,
      '--format',
      'summary'
    ]);

    expect(result.exitCode).toBe(0);
    expect(result.stdout).toContain('ÂûÉÂúæÂ∫¶Ë©ïÂàÜ');
    expect(result.stdout).toContain('Á∏ΩÂàÜ');
    expect(result.stdout).toContain('Á∂≠Â∫¶');
  });

  // ============================================================
  // 6. Ë©ïÁ¥öÁ≥ªÁµ±È©óË≠â
  // ============================================================

  describe('Ë©ïÁ¥öÁ≥ªÁµ±', () => {
    it('sample-project ÊáâË©≤ÊúâÂêàÁêÜË©ïÁ¥öÔºàÂèçÊò†ÂØ¶Èöõ‰ª£Á¢ºÂìÅË≥™Ôºâ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      // sample-project ÊúâÂ§ßÈáèÈáçË§á‰ª£Á¢ºÂíåÊ®°ÂºèÔºàÊ∏¨Ë©¶Áî® fixtureÔºâÔºåË©ïÁ¥öÁÇ∫ C ÊòØÂêàÁêÜÁöÑ
      expect(['A', 'B', 'C']).toContain(output.grade);
      expect(output.shitScore).toBeGreaterThanOrEqual(0);
      expect(output.shitScore).toBeLessThanOrEqual(100);
    });

    it('Ë©ïÁ¥ö emoji ÊáâË©≤ËàáÂàÜÊï∏Â∞çÊáâ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      const { shitScore, grade, gradeInfo } = output;

      // È©óË≠âË©ïÁ¥öÈÇèËºØ
      if (shitScore < 30) {
        expect(grade).toBe('A');
        expect(gradeInfo.emoji).toBe('‚úÖ');
      } else if (shitScore < 50) {
        expect(grade).toBe('B');
        expect(gradeInfo.emoji).toBe('‚ö†Ô∏è');
      } else if (shitScore < 70) {
        expect(grade).toBe('C');
        expect(gradeInfo.emoji).toBe('üí©');
      } else if (shitScore < 85) {
        expect(grade).toBe('D');
        expect(gradeInfo.emoji).toBe('üí©üí©');
      } else {
        expect(grade).toBe('F');
        expect(gradeInfo.emoji).toBe('üí©üí©üí©');
      }
    });
  });

  // ============================================================
  // 7. Á∂≠Â∫¶ÂàÜÊï∏È©óË≠â
  // ============================================================

  describe('Á∂≠Â∫¶ÂàÜÊï∏Ë®àÁÆó', () => {
    it('Ë§áÈõúÂ∫¶Á∂≠Â∫¶ÊáâË©≤Ë≠òÂà•È´òË§áÈõúÂ∫¶Ê™îÊ°à', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.getFilePath('src/services'),
        '--format',
        'json',
        '--detailed'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.dimensions.complexity.breakdown).toBeDefined();
      expect(output.dimensions.complexity.breakdown.highComplexity).toBeGreaterThanOrEqual(0);
      expect(output.dimensions.complexity.breakdown.longFunction).toBeGreaterThanOrEqual(0);
    });

    it('Êû∂ÊßãÁ∂≠Â∫¶ÊáâË©≤Ê™¢Ê∏¨Âæ™Áí∞‰æùË≥¥', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--format',
        'json',
        '--detailed'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.dimensions.architecture.breakdown).toBeDefined();
      expect(output.dimensions.architecture.breakdown.circularDependency).toBeGreaterThanOrEqual(0);
      expect(output.dimensions.architecture.breakdown.orphanFile).toBeGreaterThanOrEqual(0);
    });
  });

  // ============================================================
  // 8. Âª∫Ë≠∞Á≥ªÁµ±È©óË≠â
  // ============================================================

  describe('ÊîπÈÄ≤Âª∫Ë≠∞', () => {
    it('--detailed ÊáâË©≤Áî¢ÁîüÂÖ∑È´îÁöÑÊîπÈÄ≤Âª∫Ë≠∞', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      if (output.recommendations && output.recommendations.length > 0) {
        const firstRec = output.recommendations[0];
        expect(firstRec.priority).toBeDefined();
        expect(firstRec.category).toBeDefined();
        expect(firstRec.suggestion).toBeDefined();
        expect(firstRec.affectedFiles).toBeDefined();
        expect(Array.isArray(firstRec.affectedFiles)).toBe(true);
      }
    });

    it('Âª∫Ë≠∞ÊáâË©≤ÊåâÂÑ™ÂÖàÁ¥öÊéíÂ∫è', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      if (output.recommendations && output.recommendations.length > 1) {
        const priorities = ['critical', 'high', 'medium', 'low'];
        const recs = output.recommendations;

        // È©óË≠âÂÑ™ÂÖàÁ¥öÈÅûÊ∏õ
        for (let i = 0; i < recs.length - 1; i++) {
          const currentPriorityIndex = priorities.indexOf(recs[i].priority);
          const nextPriorityIndex = priorities.indexOf(recs[i + 1].priority);
          expect(currentPriorityIndex).toBeLessThanOrEqual(nextPriorityIndex);
        }
      }
    });
  });

  // ============================================================
  // 9. ÁâπÊÆäÂ†¥ÊôØÊ∏¨Ë©¶
  // ============================================================

  describe('ÁâπÊÆäÂ†¥ÊôØ', () => {
    it('ÂàÜÊûêÂñÆ‰∏ÄÊ™îÊ°àÊáâË©≤Ê≠£Â∏∏ÈÅã‰Ωú', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.getFilePath('src/services/user-service.ts'),
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.shitScore).toBeDefined();
      expect(output.shitScore).toBeGreaterThanOrEqual(0);
      expect(output.shitScore).toBeLessThanOrEqual(100);
      expect(output.summary.totalFiles).toBeGreaterThanOrEqual(0);
    });

    it('ÂàÜÊûêÁâπÂÆöÁõÆÈåÑÊáâË©≤Âè™ÂàÜÊûêË©≤ÁõÆÈåÑ', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.getFilePath('src/models'),
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);
      expect(output.summary.totalFiles).toBeGreaterThan(0);
      // models ÈÄöÂ∏∏ÊØîÊï¥ÂÄãÂ∞àÊ°àÂ∞ë
    });
  });

  // ============================================================
  // 10. ÂØ¶ÈöõÂ∞àÊ°àË©ïÂàÜÈ©óË≠â
  // ============================================================

  describe('sample-project ÂØ¶ÈöõË©ïÂàÜ', () => {
    it('ÊáâË©≤Ë≠òÂà•Â∞àÊ°àÂÑ™ÈªûÂíåÁº∫Èªû', async () => {
      const result = await executeCLI([
        'shit',
        '--path',
        fixture.tempPath,
        '--detailed',
        '--format',
        'json'
      ]);

      expect(result.exitCode).toBe(0);

      const output = JSON.parse(result.stdout);

      // sample-project ÊúâËâØÂ•ΩÁöÑÊû∂ÊßãË®≠Ë®à
      // ‰ΩÜÂèØËÉΩÊúâ‰∏Ä‰∫õË§áÈõúÁöÑÊ•≠ÂãôÈÇèËºØÔºàÂ¶Ç OrderServiceÔºâ
      expect(output.shitScore).toBeGreaterThanOrEqual(0);

      // È©óË≠âÂàÜÊï∏ÁµÑÊàêÂêàÁêÜÔºàÂåÖÂê´Á¨¨ÂõõÂÄãÁ∂≠Â∫¶ qualityAssuranceÔºâ
      const { complexity, maintainability, architecture, qualityAssurance } = output.dimensions;
      const calculatedScore =
        complexity.weightedScore +
        maintainability.weightedScore +
        architecture.weightedScore +
        qualityAssurance.weightedScore;

      // ÂÖÅË®±Â∞èÊï∏ÈªûË™§Â∑Æ
      expect(Math.abs(calculatedScore - output.shitScore)).toBeLessThan(0.1);
    });
  });
});
